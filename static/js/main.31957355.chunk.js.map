{"version":3,"sources":["component/Card.js","component/CardList.js","component/SearchBox.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","email","id","name","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","component_Card","key","SearchBox","searchChange","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","state","_this2","fetch","then","response","json","users","_this3","filteredRobots","filter","toLowerCase","includes","length","component_SearchBox","component_CardList","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","container_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.31957355.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({email, id , name}) =>{\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pd3 ma2 grow bw2 shadow-5\">\r\n            <img alt='Robots' src={`https://robohash.org/${id}?100x100`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    ); \r\n}\r\nexport default Card; ","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\nconst CardList =({robots})=>{\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map(user =>{\r\n                return(\r\n                    <Card key={user.id} \r\n                    id= {user.id}\r\n                    name={user.name} \r\n                    email={user.email}/>)\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList; ","import React from 'react'; \r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input type=\"search\" placeholder=\"Search robots\"\r\n            className=\"pa3 ba b--green bg-lightest-blue\" \r\n            onChange={searchChange}/> \r\n        </div>\r\n    );\r\n}\r\nexport default SearchBox; ","import React, { Component } from 'react'; \r\nimport CardList from '../component/CardList';\r\n// import {robots} from './robots';\r\nimport SearchBox from '../component/SearchBox';\r\nimport './app.css';\r\n\r\nclass App extends  Component {\r\n    constructor(){\r\n        super()\r\n        this.state ={\r\n            robots : [],\r\n            searchfield: ''\r\n        } \r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users=> this.setState({ robots: users}))\r\n    }\r\n\r\n    onSearchChange=(event)=>{\r\n        this.setState({searchfield : event.target.value});\r\n    } \r\n\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        });\r\n        // console.log(filteredRobots);\r\n        if(this.state.robots.length === 0){\r\n            return <h1>Loading</h1>\r\n        }\r\n        else{\r\n            return (\r\n                    <div className=\"tc\">\r\n                        <h1 className='f1'>Robot Collection</h1>\r\n                        <SearchBox searchChange = {this.onSearchChange}/>\r\n                        <CardList robots = {filteredRobots}/>\r\n                    </div> \r\n                );\r\n        }\r\n    }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import Card from './Card';\n// import CardList from './CardList';\nimport App from './container/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}